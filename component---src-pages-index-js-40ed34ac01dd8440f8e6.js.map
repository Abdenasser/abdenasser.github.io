{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/pages/index.js"],"names":["_assertThisInitialized","self","ReferenceError","Index","props","horizontal","direction","directionTo","directionFrom","half","length","TimelineMax","set","cover","y","x","display","to","ease","Power1","easeInOut","vertical","mod","opacity","easeIn","moveInDirection","bind","React","createRef","char","node","staggerFrom","querySelectorAll","Back","render","data","this","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","location","className","ref","n","map","frontmatter","fields","slug","key","exit","trigger","entry","delay","date","dangerouslySetInnerHTML","__html","spoiler","excerpt","style","position","background","top","left","width","height","transform","Component"],"mappings":"2FAAe,SAASA,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,EALT,mC,+JCSME,E,YACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MASFC,WAAa,WAAsBC,GAAe,IAC1CC,EAA4B,SAAdD,EAAuB,QAAU,OAC/CE,EAA8B,SAAdF,EAAuB,OAAS,QAIhDG,EANyC,EAAjCC,OAMS,EAEvB,OAAO,IAAIC,KACRC,IAAI,EAAKC,MAAO,CAAEC,EAAG,EAAGC,EAAGP,EAAeQ,QAAS,UACnDC,GAAG,EAAKJ,MAAOJ,EAAM,CACpBM,EAAG,KACHG,KAAMC,IAAOC,YAEdH,GAAG,EAAKJ,MAAOJ,EAAM,CACpBM,EAAGR,EACHW,KAAMC,IAAOC,aA1BA,EA8BnBC,SAAW,WAAsBf,GAAe,IACxCC,EAA4B,OAAdD,EAAqB,QAAU,OAC7CE,EAA8B,OAAdF,EAAqB,OAAS,QAE9CG,EAJuC,EAAjCC,OAIW,EAEvB,OAAO,IAAIC,KACRC,IAAI,EAAKC,MAAO,CAAEC,EAAGN,IACrBS,GAAG,EAAKJ,MAAOJ,EAAM,CACpBK,EAAG,KACHI,KAAMC,IAAOC,YAEdR,IAAI,EAAKU,IAAK,CAAEC,QAAS,IACzBN,GAAG,EAAKJ,MAAOJ,EAAM,CACpBK,EAAGP,EACHW,KAAMC,IAAOK,UA7CA,EAiDnBC,gBAAkB,SAACrB,EAAOE,GACxB,MAAkB,SAAdA,GAAsC,UAAdA,EACnB,EAAKD,WAAWD,EAAOE,GAEzB,EAAKe,SAASjB,EAAOE,IAlD5B,EAAKD,WAAa,EAAKA,WAAWqB,KAAhB,gBAClB,EAAKL,SAAW,EAAKA,SAASK,KAAd,gBAEhB,EAAKb,MAAQc,IAAMC,YACnB,EAAKN,IAAMK,IAAMC,YAPA,E,4CAwDnBC,KAAA,SAAKC,GACH,OAAO,IAAInB,KAAcoB,YACvBD,EAAKE,iBAAiB,SACtB,GACA,CAAEd,KAAMe,IAAKf,KAAMK,QAAS,EAAGT,EAAG,QAClC,M,EAIJoB,OAAA,WAAU,IAAD,OACCC,EAASC,KAAKhC,MAAd+B,KACFE,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQC,SAAUR,KAAKhC,MAAMwC,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CAAKG,MAAM,SACX,kBAAC,IAAD,MACA,yBAAKK,UAAU,YAAYC,IAAK,SAACC,GAAD,OAAQ,EAAKzB,IAAMyB,IAChDN,EAAMO,KAAI,YAAe,IAAZlB,EAAW,EAAXA,KACNU,EAAQV,EAAKmB,YAAYT,OAASV,EAAKoB,OAAOC,KACpD,OACE,6BAASC,IAAKtB,EAAKoB,OAAOC,MACxB,gCACE,4BACE,kBAAC,IAAD,CACElC,GAAE,IAAMa,EAAKoB,OAAOC,KACpBE,KAAM,CACJ3C,OAAQ,EACR4C,QAAS,gBAAGD,EAAH,EAAGA,KAAH,OACP,EAAK5B,gBAAgB4B,EAAM,UAG/BE,MAAO,CACLC,MAAO,GACPF,QAAS,gBAAGxB,EAAH,EAAGA,KAAH,OAAc,EAAKD,KAAKC,MAGlCU,IAGL,+BAAQV,EAAKmB,YAAYQ,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQ7B,EAAKmB,YAAYW,SAAW9B,EAAK+B,iBAQvD,kBAAC,mBAAD,KACE,yBACEf,IAAK,SAACC,GAAD,OAAQ,EAAKlC,MAAQkC,GAC1Be,MAAO,CACLC,SAAU,QACVC,WAAY,UACZC,IAAK,EACLC,KAAM,EACNC,MAAO,QACPC,OAAQ,QACRC,UAAW,yB,GAzHL1C,IAAM2C,WAkIXnE","file":"component---src-pages-index-js-40ed34ac01dd8440f8e6.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { TimelineMax, Back, Power1 } from \"gsap\"\nimport TransitionLink, { TransitionPortal } from \"gatsby-plugin-transition-link\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.horizontal = this.horizontal.bind(this)\n    this.vertical = this.vertical.bind(this)\n\n    this.cover = React.createRef()\n    this.mod = React.createRef()\n  }\n\n  horizontal = ({ length: seconds }, direction) => {\n    const directionTo = direction === \"left\" ? \"-100%\" : \"100%\"\n    const directionFrom = direction === \"left\" ? \"100%\" : \"-100%\"\n\n    // convert ms to s for gsap\n    // const seconds = length\n    const half = seconds / 2\n\n    return new TimelineMax()\n      .set(this.cover, { y: 0, x: directionFrom, display: \"block\" })\n      .to(this.cover, half, {\n        x: \"0%\",\n        ease: Power1.easeInOut,\n      })\n      .to(this.cover, half, {\n        x: directionTo,\n        ease: Power1.easeInOut,\n      })\n  }\n\n  vertical = ({ length: seconds }, direction) => {\n    const directionTo = direction === \"up\" ? \"-100%\" : \"100%\"\n    const directionFrom = direction === \"up\" ? \"100%\" : \"-100%\"\n\n    const half = seconds / 2\n\n    return new TimelineMax()\n      .set(this.cover, { y: directionFrom })\n      .to(this.cover, half, {\n        y: \"0%\",\n        ease: Power1.easeInOut,\n      })\n      .set(this.mod, { opacity: 0 })\n      .to(this.cover, half, {\n        y: directionTo,\n        ease: Power1.easeIn,\n      })\n  }\n\n  moveInDirection = (props, direction) => {\n    if (direction === \"left\" || direction === \"right\")\n      return this.horizontal(props, direction)\n\n    return this.vertical(props, direction)\n  }\n\n  char(node) {\n    return new TimelineMax().staggerFrom(\n      node.querySelectorAll(\".char\"),\n      0.3,\n      { ease: Back.ease, opacity: 0, y: \"+=50\" },\n      0.05\n    )\n  }\n\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"Home\" />\n        <Bio />\n        <div className=\"blog-list\" ref={(n) => (this.mod = n)}>\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <article key={node.fields.slug}>\n                <header>\n                  <h2>\n                    <TransitionLink\n                      to={`/${node.fields.slug}`}\n                      exit={{\n                        length: 1,\n                        trigger: ({ exit }) =>\n                          this.moveInDirection(exit, \"left\"),\n                        // state: { char: \"exit state\" },\n                      }}\n                      entry={{\n                        delay: 0.5,\n                        trigger: ({ node }) => this.char(node),\n                      }}\n                    >\n                      {title}\n                    </TransitionLink>\n                  </h2>\n                  <small>{node.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: node.frontmatter.spoiler || node.excerpt,\n                    }}\n                  />\n                </section>\n              </article>\n            )\n          })}\n        </div>\n        <TransitionPortal>\n          <div\n            ref={(n) => (this.cover = n)}\n            style={{\n              position: \"fixed\",\n              background: \"#8c61ff\",\n              top: 0,\n              left: 0,\n              width: \"100vw\",\n              height: \"100vh\",\n              transform: \"translateY(100%)\",\n            }}\n          />\n        </TransitionPortal>\n      </Layout>\n    )\n  }\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}